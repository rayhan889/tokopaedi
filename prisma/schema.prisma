generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  username        String
  firstName       String
  lastName        String
  email           String           @unique
  password        String
  phone           String?
  refreshToken    String?
  shoppingSession ShoppingSession?
  orderDetails    OrderDetails[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  UserAddress     UserAddress[]
  UserPayment     UserPayment[]

  @@index([email])
  @@map("users")
}

model UserAddress {
  id           String @id @default(cuid())
  user         User   @relation(fields: [userId], references: [id])
  userId       String
  addressLine1 String
  addressLine2 String
  city         String
  postalCode   String
  country      String

  @@map("user_address")
}

model UserPayment {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  paymentType String
  provider    String
  accountNo   Int
  expiry      DateTime

  @@map("user_payment")
}

model AdminType {
  id          String      @id @default(cuid())
  type        String
  permissions String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  adminUsers  AdminUser[]

  @@map("admin_type")
}

model AdminUser {
  id        String    @id @default(cuid())
  username  String
  firstName String
  lastName  String
  email     String    @unique
  password  String
  type      AdminType @relation(fields: [typeId], references: [id])
  typeId    String
  lastLogin DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("admin_users")
}

model Product {
  id          String            @id @default(cuid())
  name        String
  price       Decimal
  sku         String            @unique
  description String
  image       String
  discount    Discount?         @relation(fields: [discountId], references: [id])
  discountId  String?
  quantity    ProductInventory?
  cartItem    CartItem?
  orderItem   OrderItem?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  categories  Category[]

  @@index([sku])
  @@map("products")
}

model ShoppingSession {
  id                       String                    @id @default(cuid())
  total                    Decimal
  user                     User                      @relation(fields: [userId], references: [id])
  userId                   String                    @unique
  shoppingSessionCartItems ShoppingSessionCartItem[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@index([userId])
  @@map("shopping_session")
}

model ShoppingSessionCartItem {
  id                String          @id @default(cuid())
  quantity          Int
  shoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id])
  shoppingSessionId String
  cartItem          CartItem        @relation(fields: [cartItemId], references: [id])
  cartItemId        String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique(name: "shopSessionCartItemId", [shoppingSessionId, cartItemId])
  @@map("shoppingSession_cartItem")
}

model CartItem {
  id String @id @default(cuid())

  product                  Product                   @relation(fields: [productId], references: [id])
  productId                String                    @unique
  shoppingSessionCartItems ShoppingSessionCartItem[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@map("cart_item")
}

model OrderDetails {
  id               String             @id @default(cuid())
  total            Decimal
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  orderDetailsItem OrderDetailsItem[]
  payment          PaymentDetails?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([userId])
  @@map("order_details")
}

model OrderDetailsItem {
  id             String       @id @default(cuid())
  quantity       Int
  orderDetails   OrderDetails @relation(fields: [orderDetailsId], references: [id])
  orderDetailsId String
  orderItem      OrderItem    @relation(fields: [orderItemId], references: [id])
  orderItemId    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique(name: "orderDetailsItemId", [orderDetailsId, orderItemId])
  @@map("orderDetails_item")
}

model OrderItem {
  id               String             @id @default(cuid())
  product          Product            @relation(fields: [productId], references: [id])
  productId        String             @unique
  orderDetailsItem OrderDetailsItem[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("order_item")
}

model PaymentDetails {
  id        String       @id @default(cuid())
  amount    Decimal
  provider  String
  status    String
  order     OrderDetails @relation(fields: [orderId], references: [id])
  orderId   String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Discount {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String
  discountPercent Decimal
  active          Boolean
  products        Product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("discounts")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  products    Product[]

  @@map("categories")
}

model ProductInventory {
  id        String   @id @default(cuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_inventory")
}
